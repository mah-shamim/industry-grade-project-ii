- hosts: localhost
  become: yes
  become_method: sudo
  become_user: root
  vars:
    ansible_python_interpreter: /home/ubuntu/k8s-ansible-venv/bin/python
    docker_tag: "latest"  # Change this to any tag you want
    container_name: "xyz-technologies-ansible"
    image_name: "mahshamim/xyz-technologies-ansible"
    docker_username: "{{ lookup('env', 'DOCKER_USERNAME') }}"
    docker_password: "{{ lookup('env', 'DOCKER_PASSWORD') }}"
    kubeconfig_path: "{{ lookup('env', 'KUBECONFIG_PATH') }}"
    deployment_file: './k8s_deployments/deployment.yml'
    service_file: './k8s_deployments/service.yaml'
    namespace: "xyz-technologies-ansible" # Add your desired namespace here
    docker_host: "unix:///var/run/docker.sock"
  tasks:
    - name: Debug kubeconfig path
      debug:
        msg: "Kubeconfig path is {{ kubeconfig_path }}"

    - name: Log in to Docker Hub
      command: echo "{{ docker_password }}" | docker login -u "{{ docker_username }}" --password-stdin

    - name: Use Python from virtual environment
      ansible.builtin.command: /home/ubuntu/k8s-ansible-venv/bin/pip install kubernetes packaging

    - name: Check Python Kubernetes module
      ansible.builtin.command: /home/ubuntu/k8s-ansible-venv/bin/python -c "import kubernetes"

    - name: List installed packages
      ansible.builtin.command: /home/ubuntu/k8s-ansible-venv/bin/pip list


    - name: Check if Docker is already installed
      command: docker --version
      register: docker_installed
      ignore_errors: true

    - name: Install Docker
      apt:
        name: docker.io
        state: present
      when: docker_installed.rc != 0

    - name: Start Docker Service
      service:
        name: docker
        state: started
        enabled: true

    - name: Build WAR file using Maven (if applicable)
      command: mvn clean package
      args:
        chdir: ./
      when: docker_installed.rc == 0  # Run only if Docker is installed

    - name: Build Docker Image
      command: docker build -t {{ image_name }} .

    - name: Stop existing Docker container if running
      docker_container:
        name: "{{ container_name }}"
        state: absent
      ignore_errors: true

    - name: Remove existing Docker container if exists
      docker_container:
        name: "{{ container_name }}"
        state: absent
      ignore_errors: true

    - name: Run Docker Container
      docker_container:
        name: "{{ container_name }}"
        image: "{{ image_name }}"
        state: started
        published_ports:
          - "9393:8080"

    #- name: Log in to Docker Hub
      #command: docker login -u "{{ docker_username }}" -p "{{ docker_password }}"
      #command: echo "{{ docker_password }}" | docker login -u "{{ docker_username }}" --password-stdin
      #no_log: true
    - name: Log in to Docker Hub
      docker_login:
        username: "{{ docker_username }}"
        password: "{{ docker_password }}"

    - name: Tag Docker image for Docker Hub
      command: docker tag {{ image_name }} "{{ image_name }}:{{ docker_tag }}"

    - name: Push Docker image to Docker Hub
      command: docker push "{{ image_name }}:{{ docker_tag }}"

    #- name: Push Docker image to Docker Hub
      #docker_image:
        #name: "{{ image_name }}"
        #tag: "{{ docker_tag }}"
        #push: yes

    - name: Ensure Kubernetes namespace exists
      kubernetes.core.k8s:
        name: "{{ namespace }}"
        state: present
        kubeconfig: "{{ kubeconfig_path }}"
        api_version: v1
        kind: Namespace

    - name: Apply Kubernetes Deployment
      kubernetes.core.k8s:
        state: present
        kubeconfig: "{{ kubeconfig_path }}"
        definition: "{{ lookup('file', deployment_file) }}"
        namespace: "{{ namespace }}"  # Specify the namespace here

    - name: Apply Kubernetes Service
      kubernetes.core.k8s:
        state: present
        kubeconfig: "{{ kubeconfig_path }}"
        definition: "{{ lookup('file', service_file) }}"
        namespace: "{{ namespace }}"  # Specify the namespace here